/* The following code was generated by JFlex 1.6.1 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/User_Len/Documents/GitHub/Proyecto_MiniPHP/miniPHP/src/miniPHP.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\45\1\64\1\64\1\63\22\0\1\67\1\52\1\47"+
    "\1\62\1\66\1\0\1\50\1\44\1\57\1\57\1\55\1\53\1\57"+
    "\1\42\1\43\1\54\1\41\1\41\6\41\2\41\1\0\1\57\1\36"+
    "\1\56\1\40\1\37\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\60\1\46\1\61\1\0\1\32\1\0\1\1\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\12\1\57\1\51\1\57\1\0\6\12\1\65\32\12\1\12"+
    "\137\12\60\0\2\33\115\0\1\35\u1500\0\1\67\u097f\0\13\67\35\0"+
    "\1\64\1\64\5\0\1\67\57\0\1\67\312\0\1\34\u0ed5\0\1\67"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\27\2\2\1\1\3\1\1\1\3\1\4"+
    "\1\3\1\5\1\1\1\6\1\5\3\1\4\3\1\7"+
    "\1\6\1\1\3\2\2\10\2\2\1\0\5\2\1\0"+
    "\12\2\1\0\6\2\1\0\1\2\1\0\15\2\1\0"+
    "\1\2\5\0\2\3\1\11\1\0\1\4\7\0\1\4"+
    "\4\0\7\12\1\2\1\0\3\2\1\0\11\2\1\0"+
    "\5\2\1\0\2\2\1\10\1\2\1\0\6\2\1\0"+
    "\1\2\1\0\4\2\1\0\5\2\1\0\4\2\1\0"+
    "\1\2\1\0\10\2\5\0\1\4\5\0\2\4\1\0"+
    "\14\12\1\0\1\2\1\0\3\2\1\0\3\2\1\0"+
    "\3\2\1\0\1\2\2\10\4\2\2\0\4\2\1\0"+
    "\5\2\1\0\4\2\1\0\3\2\1\0\1\4\1\0"+
    "\2\2\1\0\2\2\1\0\2\2\1\0\3\2\10\0"+
    "\1\7\10\12\1\0\4\12\1\0\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\4\2\1\10\1\2\1\10\6\2"+
    "\2\0\1\2\1\0\2\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\4\2"+
    "\5\0\2\13\6\12\2\0\3\12\2\0\1\2\1\0"+
    "\1\2\1\0\2\2\2\0\6\2\3\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\5\2\2\0\5\12\1\0"+
    "\1\12\1\0\3\12\3\0\2\2\1\10\3\2\3\0"+
    "\1\2\1\10\2\14\4\2\2\0\4\12\1\0\2\12"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\2\0\4\12"+
    "\1\0\1\12\1\0\1\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\12\1\0\2\12\1\0\1\2\2\12\1\0"+
    "\2\12\1\0\1\2\2\12\1\0\1\12\1\0\1\2"+
    "\1\0\2\12\1\0\1\12\3\0\1\2\1\0\1\12"+
    "\1\0\1\12\5\0\1\12\1\0\1\12\1\0\1\15"+
    "\2\0\1\12\1\0\1\12\1\0\2\15\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\70\0\70\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0268\0\70\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8"+
    "\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8"+
    "\0\u1420\0\u1458\0\u1490\0\u14c8\0\70\0\u1500\0\70\0\u1538"+
    "\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u0738"+
    "\0\70\0\u16f8\0\u0770\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810"+
    "\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90"+
    "\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10"+
    "\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0"+
    "\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u0738\0\u0770\0\u28e8"+
    "\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28"+
    "\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8"+
    "\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8"+
    "\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528"+
    "\0\u0268\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678\0\u36b0"+
    "\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870"+
    "\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\70\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8"+
    "\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78"+
    "\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38"+
    "\0\u3f70\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8"+
    "\0\u4130\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8"+
    "\0\u42f0\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478"+
    "\0\u44b0\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638"+
    "\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u17d8\0\70\0\u4788"+
    "\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948"+
    "\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08"+
    "\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8"+
    "\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88"+
    "\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u5048"+
    "\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0\0\u5208"+
    "\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8"+
    "\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588"+
    "\0\u55c0\0\u55f8\0\u5630\0\u0268\0\70\0\u5668\0\u56a0\0\u56d8"+
    "\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898"+
    "\0\u58d0\0\u5908\0\u5940\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58"+
    "\0\u5a90\0\u5ac8\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18"+
    "\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68\0\u5da0\0\u5dd8"+
    "\0\u5e10\0\u5e48\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98"+
    "\0\u5fd0\0\u6008\0\u6040\0\u6078\0\u60b0\0\u60e8\0\u6120\0\u6158"+
    "\0\u6190\0\u61c8\0\u6200\0\u6238\0\u6270\0\u62a8\0\u62e0\0\u6318"+
    "\0\u6350\0\u6388\0\u63c0\0\u63f8\0\u6430\0\u6468\0\u64a0\0\u64d8"+
    "\0\u6510\0\u6548\0\u6580\0\u65b8\0\u65f0\0\u6628\0\u6660\0\u6698"+
    "\0\u66d0\0\u6708\0\u6740\0\u6778\0\u67b0\0\70\0\u67e8\0\u6820"+
    "\0\u6858\0\u6890\0\u68c8\0\u6900\0\u6468\0\u64a0\0\u6938\0\u6970"+
    "\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0\0\u6af8\0\u6b30"+
    "\0\u6b68\0\u6ba0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\14\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\50\3\44\1\54"+
    "\1\55\1\43\1\14\1\56\1\43\71\0\1\14\1\57"+
    "\13\14\1\60\3\14\1\61\1\62\7\14\2\0\1\63"+
    "\3\0\1\14\23\0\1\14\3\0\10\14\1\64\10\14"+
    "\1\65\10\14\1\66\5\0\1\14\23\0\1\14\3\0"+
    "\1\67\12\14\1\70\2\14\1\71\13\14\6\0\1\14"+
    "\23\0\1\14\3\0\4\14\1\72\3\14\1\73\5\14"+
    "\1\62\13\14\1\74\5\0\1\14\23\0\1\14\3\0"+
    "\2\14\1\75\10\14\1\76\1\77\1\100\7\14\1\101"+
    "\1\14\1\102\2\14\6\0\1\14\23\0\1\14\3\0"+
    "\1\103\7\14\1\104\5\14\1\105\5\14\1\106\5\14"+
    "\1\107\5\0\1\14\23\0\1\14\3\0\13\14\1\110"+
    "\2\14\1\111\13\14\6\0\1\14\23\0\1\14\3\0"+
    "\4\14\1\112\25\14\6\0\1\14\23\0\1\14\3\0"+
    "\5\14\1\62\6\14\1\113\1\114\4\14\1\115\7\14"+
    "\2\0\1\116\3\0\1\14\23\0\1\14\3\0\32\14"+
    "\6\0\1\14\23\0\1\14\3\0\10\14\1\117\21\14"+
    "\1\120\5\0\1\14\23\0\1\14\3\0\1\121\3\14"+
    "\1\122\25\14\6\0\1\14\23\0\1\14\3\0\2\14"+
    "\1\123\16\14\1\62\10\14\6\0\1\14\23\0\1\14"+
    "\3\0\21\14\1\124\2\14\1\125\5\14\6\0\1\14"+
    "\23\0\1\14\3\0\4\14\1\126\25\14\6\0\1\14"+
    "\23\0\1\14\3\0\23\14\1\127\2\14\1\130\3\14"+
    "\6\0\1\14\23\0\1\14\3\0\7\14\1\131\11\14"+
    "\1\132\10\14\6\0\1\14\23\0\1\14\3\0\15\14"+
    "\1\115\4\14\1\73\7\14\2\0\1\74\3\0\1\14"+
    "\23\0\1\14\3\0\1\133\31\14\6\0\1\14\23\0"+
    "\1\14\3\0\7\14\1\134\22\14\6\0\1\14\23\0"+
    "\1\14\3\0\16\14\1\133\13\14\6\0\1\14\23\0"+
    "\1\14\3\0\10\14\1\135\21\14\1\136\5\0\1\14"+
    "\23\0\1\14\3\0\31\14\1\137\6\0\1\14\23\0"+
    "\1\14\10\0\1\63\6\0\1\140\1\141\4\0\1\116"+
    "\11\0\1\116\56\0\1\142\2\0\1\143\77\0\1\144"+
    "\1\145\15\0\1\146\50\0\1\145\1\147\105\0\1\145"+
    "\16\0\1\150\33\0\1\37\1\0\1\151\26\0\1\152"+
    "\1\0\1\153\3\0\1\154\6\0\1\155\21\0\1\156"+
    "\1\145\1\157\12\0\1\145\52\0\1\151\26\0\44\160"+
    "\1\161\1\0\1\162\21\160\45\163\1\0\1\164\1\161"+
    "\20\163\50\0\1\145\70\0\1\145\74\0\1\36\13\0"+
    "\1\152\1\0\1\153\3\0\1\154\6\0\1\155\21\0"+
    "\1\156\1\0\1\157\7\0\1\145\2\0\1\145\65\0"+
    "\1\54\1\165\1\145\66\0\2\145\11\0\45\54\1\0"+
    "\15\54\3\0\2\54\45\0\1\43\23\0\1\166\5\167"+
    "\1\170\1\171\7\167\1\172\1\167\1\173\7\167\1\174"+
    "\32\0\1\167\3\0\22\14\1\175\7\14\2\0\1\176"+
    "\3\0\1\14\23\0\1\14\3\0\3\14\1\62\26\14"+
    "\6\0\1\14\23\0\1\14\3\0\21\14\1\177\10\14"+
    "\6\0\1\14\23\0\1\14\3\0\15\14\1\200\14\14"+
    "\6\0\1\14\23\0\1\14\3\0\4\14\1\201\25\14"+
    "\6\0\1\14\23\0\1\14\20\0\1\202\52\0\13\14"+
    "\1\203\6\14\1\73\1\204\6\14\2\0\1\74\3\0"+
    "\1\14\23\0\1\14\3\0\1\205\15\14\1\206\13\14"+
    "\6\0\1\14\23\0\1\14\3\0\15\14\1\207\14\14"+
    "\6\0\1\14\23\0\1\14\3\0\2\14\1\210\2\14"+
    "\1\211\24\14\6\0\1\14\23\0\1\14\3\0\4\14"+
    "\1\62\25\14\6\0\1\14\23\0\1\14\7\0\1\63"+
    "\63\0\7\14\1\212\22\14\6\0\1\14\23\0\1\14"+
    "\3\0\22\14\1\213\7\14\2\0\1\214\3\0\1\14"+
    "\23\0\1\14\3\0\17\14\1\215\12\14\6\0\1\14"+
    "\23\0\1\14\3\0\3\14\1\216\26\14\6\0\1\14"+
    "\23\0\1\14\3\0\1\217\31\14\6\0\1\14\23\0"+
    "\1\14\3\0\10\14\1\220\12\14\1\221\6\14\1\222"+
    "\5\0\1\14\23\0\1\14\3\0\13\14\1\223\16\14"+
    "\6\0\1\14\23\0\1\14\3\0\15\14\1\224\14\14"+
    "\6\0\1\14\23\0\1\14\3\0\21\14\1\225\10\14"+
    "\6\0\1\14\23\0\1\14\3\0\15\14\1\226\14\14"+
    "\6\0\1\14\23\0\1\14\20\0\1\227\52\0\16\14"+
    "\1\230\13\14\6\0\1\14\23\0\1\14\3\0\23\14"+
    "\1\212\6\14\6\0\1\14\23\0\1\14\3\0\27\14"+
    "\1\231\2\14\6\0\1\14\23\0\1\14\3\0\17\14"+
    "\1\232\12\14\6\0\1\14\23\0\1\14\3\0\2\14"+
    "\1\233\17\14\1\234\1\235\6\14\2\0\1\236\3\0"+
    "\1\14\23\0\1\14\3\0\22\14\1\237\7\14\2\0"+
    "\1\240\3\0\1\14\23\0\1\14\25\0\1\240\11\0"+
    "\1\240\33\0\22\14\1\220\7\14\2\0\1\222\3\0"+
    "\1\14\23\0\1\14\25\0\1\222\11\0\1\222\33\0"+
    "\14\14\1\241\15\14\6\0\1\14\23\0\1\14\3\0"+
    "\26\14\1\62\3\14\6\0\1\14\23\0\1\14\3\0"+
    "\23\14\1\242\6\14\6\0\1\14\23\0\1\14\3\0"+
    "\10\14\1\243\5\14\1\244\13\14\1\245\5\0\1\14"+
    "\23\0\1\14\3\0\1\14\1\246\30\14\6\0\1\14"+
    "\23\0\1\14\3\0\20\14\1\247\2\14\1\250\6\14"+
    "\6\0\1\14\23\0\1\14\3\0\1\251\31\14\6\0"+
    "\1\14\23\0\1\14\3\0\10\14\1\252\21\14\1\253"+
    "\5\0\1\14\23\0\1\14\3\0\21\14\1\254\10\14"+
    "\6\0\1\14\23\0\1\14\3\0\1\255\23\14\1\256"+
    "\3\14\1\62\1\14\6\0\1\14\23\0\1\14\3\0"+
    "\21\14\1\62\10\14\6\0\1\14\23\0\1\14\3\0"+
    "\10\14\1\257\21\14\1\260\5\0\1\14\23\0\1\14"+
    "\3\0\4\14\1\261\25\14\6\0\1\14\23\0\1\14"+
    "\7\0\1\262\63\0\2\14\1\263\1\264\1\14\1\265"+
    "\1\14\1\266\3\14\1\267\1\270\1\271\5\14\1\272"+
    "\6\14\6\0\1\14\23\0\1\14\22\0\1\273\52\0"+
    "\1\274\17\0\1\236\1\275\10\0\1\236\33\0\1\276"+
    "\77\0\1\253\21\0\1\253\54\0\1\277\107\0\1\145"+
    "\70\0\1\300\1\301\10\0\1\301\21\0\1\150\33\0"+
    "\1\151\37\0\1\66\21\0\1\66\41\0\1\302\67\0"+
    "\1\303\65\0\1\304\71\0\1\150\33\0\1\156\1\0"+
    "\1\305\65\0\1\305\26\0\44\160\1\306\1\0\1\162"+
    "\21\160\45\163\1\0\1\164\1\307\20\163\54\165\1\0"+
    "\1\310\12\165\1\0\21\167\1\311\10\167\6\0\1\167"+
    "\23\0\1\167\3\0\32\167\6\0\1\167\23\0\1\167"+
    "\3\0\13\167\1\312\16\167\6\0\1\167\23\0\1\167"+
    "\3\0\23\167\1\313\6\167\6\0\1\167\23\0\1\167"+
    "\3\0\7\167\1\314\22\167\6\0\1\167\23\0\1\167"+
    "\3\0\4\167\1\315\25\167\6\0\1\167\23\0\1\167"+
    "\3\0\2\167\1\316\1\167\1\317\1\320\1\321\10\167"+
    "\1\322\1\167\1\323\1\324\7\167\2\0\1\325\3\0"+
    "\1\167\23\0\1\167\3\0\23\14\1\326\6\14\6\0"+
    "\1\14\23\0\1\14\26\0\1\327\44\0\1\330\31\14"+
    "\6\0\1\14\23\0\1\14\3\0\1\331\31\14\6\0"+
    "\1\14\23\0\1\14\3\0\1\332\31\14\6\0\1\14"+
    "\23\0\1\14\3\0\1\333\67\0\13\14\1\334\16\14"+
    "\6\0\1\14\23\0\1\14\3\0\2\14\1\335\27\14"+
    "\6\0\1\14\23\0\1\14\3\0\22\14\1\336\7\14"+
    "\2\0\1\337\3\0\1\14\23\0\1\14\3\0\15\14"+
    "\1\73\14\14\6\0\1\14\23\0\1\14\3\0\22\14"+
    "\1\220\1\340\6\14\2\0\1\222\3\0\1\14\23\0"+
    "\1\14\3\0\10\14\1\341\2\14\1\342\16\14\1\343"+
    "\5\0\1\14\23\0\1\14\3\0\1\344\31\14\6\0"+
    "\1\14\23\0\1\14\3\0\16\14\1\62\13\14\6\0"+
    "\1\14\23\0\1\14\3\0\4\14\1\345\25\14\6\0"+
    "\1\14\23\0\1\14\7\0\1\346\63\0\23\14\1\330"+
    "\6\14\6\0\1\14\23\0\1\14\3\0\3\14\1\347"+
    "\1\14\1\350\2\14\1\351\11\14\1\352\3\14\1\26"+
    "\3\14\1\353\1\0\1\354\3\0\1\14\23\0\1\14"+
    "\3\0\13\14\1\62\16\14\6\0\1\14\23\0\1\14"+
    "\3\0\23\14\1\62\6\14\6\0\1\14\23\0\1\14"+
    "\3\0\4\14\1\355\25\14\6\0\1\14\23\0\1\14"+
    "\26\0\1\63\44\0\22\14\1\256\7\14\6\0\1\14"+
    "\23\0\1\14\3\0\1\356\31\14\6\0\1\14\23\0"+
    "\1\14\3\0\4\14\1\357\25\14\6\0\1\14\23\0"+
    "\1\14\3\0\2\14\1\360\27\14\6\0\1\14\23\0"+
    "\1\14\3\0\1\361\67\0\1\14\1\101\30\14\6\0"+
    "\1\14\23\0\1\14\3\0\1\362\31\14\6\0\1\14"+
    "\23\0\1\14\3\0\13\14\1\363\16\14\6\0\1\14"+
    "\23\0\1\14\3\0\13\14\1\364\16\14\6\0\1\14"+
    "\23\0\1\14\3\0\23\14\1\365\6\14\6\0\1\14"+
    "\23\0\1\14\3\0\4\14\1\366\25\14\6\0\1\14"+
    "\23\0\1\14\26\0\1\367\44\0\4\14\1\220\25\14"+
    "\6\0\1\14\23\0\1\14\7\0\1\222\63\0\4\14"+
    "\1\370\25\14\6\0\1\14\23\0\1\14\3\0\1\371"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\15\14\1\220"+
    "\7\14\1\372\4\14\6\0\1\14\23\0\1\14\3\0"+
    "\23\14\1\373\6\14\6\0\1\14\23\0\1\14\20\0"+
    "\1\222\7\0\1\374\42\0\13\14\1\375\16\14\6\0"+
    "\1\14\23\0\1\14\3\0\24\14\1\376\5\14\6\0"+
    "\1\14\23\0\1\14\3\0\24\14\1\377\5\14\6\0"+
    "\1\14\23\0\1\14\3\0\23\14\1\375\6\14\6\0"+
    "\1\14\23\0\1\14\3\0\23\14\1\204\6\14\6\0"+
    "\1\14\23\0\1\14\26\0\1\u0100\44\0\16\14\1\122"+
    "\13\14\6\0\1\14\23\0\1\14\3\0\10\14\1\220"+
    "\21\14\1\222\5\0\1\14\23\0\1\14\3\0\4\14"+
    "\1\u0101\25\14\6\0\1\14\23\0\1\14\3\0\13\14"+
    "\1\73\16\14\6\0\1\14\23\0\1\14\16\0\1\74"+
    "\54\0\13\14\1\60\16\14\6\0\1\14\23\0\1\14"+
    "\16\0\1\u0102\54\0\13\14\1\u0103\16\14\6\0\1\14"+
    "\23\0\1\14\3\0\10\14\1\u0104\21\14\1\u0105\5\0"+
    "\1\14\23\0\1\14\3\0\10\14\1\u0106\13\14\1\u0107"+
    "\5\14\1\u0108\5\0\1\14\23\0\1\14\3\0\1\u0109"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\10\14\1\u010a"+
    "\21\14\1\u010b\5\0\1\14\23\0\1\14\3\0\4\14"+
    "\1\u010c\25\14\6\0\1\14\23\0\1\14\3\0\1\u010d"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\21\14\1\u010e"+
    "\10\14\6\0\1\14\23\0\1\14\16\0\1\u010f\67\0"+
    "\1\u0110\60\0\1\u0111\106\0\1\u0112\53\0\1\u0113\120\0"+
    "\1\300\31\0\1\u0114\114\0\1\u0115\63\0\1\u0116\50\0"+
    "\1\150\33\0\1\305\102\0\1\u0117\14\0\6\167\1\u0118"+
    "\23\167\6\0\1\167\23\0\1\167\3\0\16\167\1\u0119"+
    "\13\167\6\0\1\167\23\0\1\167\3\0\23\167\1\u011a"+
    "\6\167\6\0\1\167\23\0\1\167\3\0\17\167\1\u011b"+
    "\12\167\6\0\1\167\23\0\1\167\3\0\2\167\1\u011c"+
    "\27\167\6\0\1\167\23\0\1\167\3\0\16\167\1\u011d"+
    "\13\167\6\0\1\167\23\0\1\167\3\0\15\167\1\u011e"+
    "\14\167\6\0\1\167\23\0\1\167\3\0\10\167\1\u011f"+
    "\21\167\1\u0120\5\0\1\167\23\0\1\167\3\0\4\167"+
    "\1\u0121\25\167\6\0\1\167\23\0\1\167\3\0\16\167"+
    "\1\u0122\13\167\6\0\1\167\23\0\1\167\3\0\4\167"+
    "\1\u0123\25\167\6\0\1\167\23\0\1\167\3\0\4\167"+
    "\1\u0124\25\167\6\0\1\167\23\0\1\167\7\0\1\u0125"+
    "\63\0\21\14\1\u0126\10\14\6\0\1\14\23\0\1\14"+
    "\24\0\1\u0127\46\0\30\14\1\62\1\14\6\0\1\14"+
    "\23\0\1\14\3\0\21\14\1\u0128\10\14\6\0\1\14"+
    "\23\0\1\14\3\0\12\14\1\62\17\14\1\0\1\63"+
    "\4\0\1\14\23\0\1\14\24\0\1\u0129\46\0\1\u012a"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\7\14\1\62"+
    "\22\14\6\0\1\14\23\0\1\14\3\0\22\14\1\62"+
    "\7\14\2\0\1\63\3\0\1\14\23\0\1\14\25\0"+
    "\1\63\11\0\1\63\33\0\10\14\1\u012b\21\14\1\u012c"+
    "\5\0\1\14\23\0\1\14\3\0\14\14\1\242\15\14"+
    "\6\0\1\14\23\0\1\14\3\0\1\u012d\31\14\6\0"+
    "\1\14\23\0\1\14\17\0\1\u0116\53\0\24\14\1\u012e"+
    "\5\14\6\0\1\14\23\0\1\14\3\0\10\14\1\351"+
    "\21\14\1\353\5\0\1\14\23\0\1\14\13\0\1\353"+
    "\21\0\1\353\35\0\4\14\1\u012f\25\14\6\0\1\14"+
    "\23\0\1\14\3\0\16\14\1\105\13\14\6\0\1\14"+
    "\23\0\1\14\3\0\5\14\1\62\24\14\6\0\1\14"+
    "\23\0\1\14\3\0\26\14\1\130\3\14\6\0\1\14"+
    "\23\0\1\14\10\0\1\63\110\0\1\143\41\0\15\14"+
    "\1\u0130\14\14\6\0\1\14\23\0\1\14\3\0\13\14"+
    "\1\u0131\16\14\6\0\1\14\23\0\1\14\3\0\1\204"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\23\14\1\u0132"+
    "\6\14\6\0\1\14\23\0\1\14\16\0\1\u0133\54\0"+
    "\3\14\1\u0134\26\14\6\0\1\14\23\0\1\14\3\0"+
    "\4\14\1\u0135\25\14\6\0\1\14\23\0\1\14\3\0"+
    "\24\14\1\u0136\5\14\6\0\1\14\23\0\1\14\3\0"+
    "\1\u0137\3\14\1\u0138\25\14\6\0\1\14\23\0\1\14"+
    "\3\0\21\14\1\u0139\10\14\6\0\1\14\23\0\1\14"+
    "\3\0\1\u013a\3\0\1\u013b\63\0\22\14\1\u013c\7\14"+
    "\2\0\1\u013d\3\0\1\14\23\0\1\14\3\0\13\14"+
    "\1\u0101\16\14\6\0\1\14\23\0\1\14\3\0\1\u013e"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\4\14\1\u013f"+
    "\25\14\6\0\1\14\23\0\1\14\3\0\1\u0140\67\0"+
    "\10\14\1\u0141\21\14\1\u0142\5\0\1\14\23\0\1\14"+
    "\3\0\10\14\1\u0143\21\14\1\u0144\5\0\1\14\23\0"+
    "\1\14\3\0\21\14\1\u0145\10\14\6\0\1\14\23\0"+
    "\1\14\5\0\1\u0146\70\0\1\63\64\0\1\u0147\31\14"+
    "\6\0\1\14\23\0\1\14\3\0\21\14\1\u0148\10\14"+
    "\6\0\1\14\23\0\1\14\24\0\1\u0149\46\0\13\14"+
    "\1\u014a\16\14\6\0\1\14\23\0\1\14\3\0\15\14"+
    "\1\u014b\14\14\6\0\1\14\23\0\1\14\16\0\1\u014c"+
    "\54\0\13\14\1\u014d\16\14\6\0\1\14\23\0\1\14"+
    "\3\0\15\14\1\u014a\14\14\6\0\1\14\23\0\1\14"+
    "\20\0\1\u014c\52\0\23\14\1\u014e\6\14\6\0\1\14"+
    "\23\0\1\14\3\0\14\14\1\u014f\15\14\6\0\1\14"+
    "\23\0\1\14\3\0\1\u0150\31\14\6\0\1\14\23\0"+
    "\1\14\7\0\1\u0151\107\0\1\u0152\64\0\1\u0153\56\0"+
    "\1\u0142\21\0\1\u0142\54\0\1\147\60\0\1\343\21\0"+
    "\1\343\35\0\1\u0154\67\0\1\u0155\67\0\2\167\1\u0156"+
    "\17\167\1\u0156\2\167\1\u0156\4\167\2\0\1\u0157\3\0"+
    "\1\167\23\0\1\167\3\0\1\167\1\u0158\30\167\6\0"+
    "\1\167\23\0\1\167\3\0\17\167\1\u0159\12\167\6\0"+
    "\1\167\23\0\1\167\3\0\31\167\1\u015a\6\0\1\167"+
    "\23\0\1\167\3\0\16\167\1\u015b\13\167\6\0\1\167"+
    "\23\0\1\167\3\0\16\167\1\u015c\13\167\6\0\1\167"+
    "\23\0\1\167\3\0\25\167\1\u0156\4\167\6\0\1\167"+
    "\23\0\1\167\3\0\13\167\1\u015d\16\167\6\0\1\167"+
    "\23\0\1\167\16\0\1\u015e\54\0\23\167\1\u0156\6\167"+
    "\6\0\1\167\23\0\1\167\3\0\22\167\1\u0121\7\167"+
    "\2\0\1\u015f\3\0\1\167\23\0\1\167\3\0\20\167"+
    "\1\u0160\11\167\6\0\1\167\23\0\1\167\3\0\21\167"+
    "\1\u0161\1\u0162\7\167\2\0\1\u0163\3\0\1\167\23\0"+
    "\1\167\24\0\1\u0164\1\u0163\11\0\1\u0163\33\0\1\u0165"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\1\u0166\67\0"+
    "\30\14\1\u0101\1\14\6\0\1\14\23\0\1\14\33\0"+
    "\1\161\37\0\1\14\1\257\30\14\6\0\1\14\23\0"+
    "\1\14\3\0\15\14\1\u0167\14\14\6\0\1\14\23\0"+
    "\1\14\20\0\1\u0168\52\0\21\14\1\73\10\14\6\0"+
    "\1\14\23\0\1\14\3\0\13\14\1\220\16\14\6\0"+
    "\1\14\23\0\1\14\3\0\2\14\1\u0169\27\14\6\0"+
    "\1\14\23\0\1\14\3\0\3\14\1\336\26\14\6\0"+
    "\1\14\23\0\1\14\3\0\13\14\1\330\16\14\6\0"+
    "\1\14\23\0\1\14\3\0\10\14\1\u016a\21\14\1\u016b"+
    "\5\0\1\14\23\0\1\14\16\0\1\u016c\54\0\4\14"+
    "\1\u016d\25\14\6\0\1\14\23\0\1\14\3\0\14\14"+
    "\1\u016e\15\14\6\0\1\14\23\0\1\14\3\0\3\14"+
    "\1\u016f\26\14\6\0\1\14\23\0\1\14\3\0\15\14"+
    "\1\u0170\14\14\6\0\1\14\23\0\1\14\3\0\1\u0171"+
    "\31\14\6\0\1\14\23\0\1\14\3\0\5\14\1\u0172"+
    "\24\14\6\0\1\14\23\0\1\14\20\0\1\u0173\52\0"+
    "\1\u0174\67\0\17\14\1\u0172\12\14\6\0\1\14\23\0"+
    "\1\14\22\0\1\u0175\50\0\23\14\1\73\6\14\6\0"+
    "\1\14\23\0\1\14\3\0\2\14\1\u0176\27\14\6\0"+
    "\1\14\23\0\1\14\26\0\1\74\44\0\2\14\1\62"+
    "\27\14\6\0\1\14\23\0\1\14\5\0\1\63\65\0"+
    "\21\14\1\u016f\10\14\6\0\1\14\23\0\1\14\24\0"+
    "\1\u0177\46\0\15\14\1\62\14\14\6\0\1\14\23\0"+
    "\1\14\12\0\1\63\60\0\22\14\1\u0178\7\14\2\0"+
    "\1\u0179\3\0\1\14\23\0\1\14\3\0\31\14\1\u017a"+
    "\6\0\1\14\23\0\1\14\34\0\1\u017b\36\0\4\14"+
    "\1\u0148\25\14\6\0\1\14\23\0\1\14\3\0\2\14"+
    "\1\u017c\27\14\6\0\1\14\23\0\1\14\7\0\1\u0149"+
    "\63\0\23\14\1\u017d\6\14\6\0\1\14\23\0\1\14"+
    "\3\0\7\14\1\u017e\22\14\6\0\1\14\23\0\1\14"+
    "\3\0\4\14\1\u017f\25\14\6\0\1\14\23\0\1\14"+
    "\3\0\10\14\1\u0180\21\14\1\u0181\5\0\1\14\23\0"+
    "\1\14\17\0\1\u0182\56\0\1\u0177\71\0\1\u0175\65\0"+
    "\1\153\77\0\1\161\54\0\1\u0183\31\167\6\0\1\167"+
    "\23\0\1\167\3\0\31\167\1\u0184\6\0\1\167\23\0"+
    "\1\167\3\0\4\167\1\u0185\25\167\6\0\1\167\23\0"+
    "\1\167\3\0\21\167\1\u0186\10\167\6\0\1\167\23\0"+
    "\1\167\3\0\12\167\1\u0187\17\167\1\0\1\u0188\4\0"+
    "\1\167\23\0\1\167\3\0\4\167\1\u0189\25\167\6\0"+
    "\1\167\23\0\1\167\7\0\1\u018a\106\0\1\u0157\44\0"+
    "\24\167\1\u018b\5\167\6\0\1\167\23\0\1\167\3\0"+
    "\25\167\1\u018c\4\167\6\0\1\167\23\0\1\167\3\0"+
    "\22\167\1\u018d\7\167\2\0\1\u018e\3\0\1\167\23\0"+
    "\1\167\25\0\1\u018e\11\0\1\u018e\60\0\1\u018f\42\0"+
    "\2\14\1\220\27\14\6\0\1\14\23\0\1\14\5\0"+
    "\1\222\65\0\24\14\1\73\5\14\6\0\1\14\23\0"+
    "\1\14\27\0\1\74\43\0\13\14\1\342\16\14\6\0"+
    "\1\14\23\0\1\14\3\0\16\14\1\u0145\13\14\6\0"+
    "\1\14\23\0\1\14\21\0\1\u0190\101\0\1\63\37\0"+
    "\2\14\1\u0191\27\14\6\0\1\14\23\0\1\14\3\0"+
    "\4\14\1\u0192\25\14\6\0\1\14\23\0\1\14\3\0"+
    "\4\14\1\u0193\25\14\6\0\1\14\23\0\1\14\3\0"+
    "\2\14\1\u0194\27\14\6\0\1\14\23\0\1\14\3\0"+
    "\3\14\1\u0195\26\14\6\0\1\14\23\0\1\14\3\0"+
    "\1\u0196\31\14\6\0\1\14\23\0\1\14\5\0\1\u0197"+
    "\70\0\1\u0198\64\0\1\u0199\67\0\23\14\1\u019a\6\14"+
    "\6\0\1\14\23\0\1\14\7\0\1\u019b\63\0\22\14"+
    "\1\u0148\7\14\2\0\1\u0149\3\0\1\14\23\0\1\14"+
    "\25\0\1\u0149\11\0\1\u0149\33\0\31\14\1\u019c\6\0"+
    "\1\14\23\0\1\14\34\0\1\u019d\36\0\23\14\1\u019e"+
    "\6\14\6\0\1\14\23\0\1\14\3\0\31\14\1\u019f"+
    "\6\0\1\14\23\0\1\14\3\0\16\14\1\u01a0\13\14"+
    "\6\0\1\14\23\0\1\14\3\0\22\14\1\u01a1\7\14"+
    "\2\0\1\u01a2\3\0\1\14\23\0\1\14\3\0\23\14"+
    "\1\u0148\6\14\6\0\1\14\23\0\1\14\26\0\1\u0149"+
    "\50\0\1\u01a3\63\0\13\167\1\u0189\16\167\6\0\1\167"+
    "\23\0\1\167\3\0\21\167\1\u01a4\10\167\6\0\1\167"+
    "\23\0\1\167\3\0\21\167\1\u01a5\10\167\6\0\1\167"+
    "\23\0\1\167\3\0\3\167\1\u01a6\26\167\6\0\1\167"+
    "\23\0\1\167\3\0\10\167\1\u01a7\21\167\1\u01a8\5\0"+
    "\1\167\23\0\1\167\13\0\1\u01a8\21\0\1\u01a8\35\0"+
    "\22\167\1\u0156\7\167\2\0\1\u0157\3\0\1\167\23\0"+
    "\1\167\25\0\1\u0157\11\0\1\u0157\33\0\4\167\1\u0122"+
    "\25\167\6\0\1\167\23\0\1\167\3\0\4\167\1\u01a9"+
    "\25\167\6\0\1\167\23\0\1\167\3\0\10\167\1\u01aa"+
    "\21\167\1\u01ab\5\0\1\167\23\0\1\167\13\0\1\u01ab"+
    "\21\0\1\u01ab\41\0\1\u01ac\100\0\1\63\52\0\10\14"+
    "\1\341\21\14\1\343\5\0\1\14\23\0\1\14\3\0"+
    "\15\14\1\u01ad\14\14\6\0\1\14\23\0\1\14\3\0"+
    "\31\14\1\u01ae\6\0\1\14\23\0\1\14\3\0\4\14"+
    "\1\u0195\25\14\6\0\1\14\23\0\1\14\3\0\16\14"+
    "\1\351\13\14\6\0\1\14\23\0\1\14\3\0\2\14"+
    "\1\73\27\14\6\0\1\14\23\0\1\14\7\0\1\u0198"+
    "\101\0\1\353\53\0\1\74\65\0\4\14\1\60\25\14"+
    "\6\0\1\14\23\0\1\14\34\0\1\u01af\36\0\10\14"+
    "\1\u01b0\21\14\1\u01b1\5\0\1\14\23\0\1\14\3\0"+
    "\2\14\1\u01b2\27\14\6\0\1\14\23\0\1\14\3\0"+
    "\3\14\1\u0148\26\14\6\0\1\14\23\0\1\14\3\0"+
    "\17\14\1\u01b3\12\14\6\0\1\14\23\0\1\14\22\0"+
    "\1\u01b4\65\0\1\u01b5\52\0\1\u01b6\3\167\1\u01b7\25\167"+
    "\6\0\1\167\23\0\1\167\3\0\21\167\1\u01b8\10\167"+
    "\6\0\1\167\23\0\1\167\3\0\22\167\1\u01b9\7\167"+
    "\2\0\1\u01ba\3\0\1\167\23\0\1\167\3\0\4\167"+
    "\1\u0156\25\167\6\0\1\167\23\0\1\167\7\0\1\u0157"+
    "\63\0\21\167\1\u0156\10\167\6\0\1\167\23\0\1\167"+
    "\3\0\16\167\1\u01bb\13\167\6\0\1\167\23\0\1\167"+
    "\21\0\1\u01bc\72\0\1\u0157\46\0\23\14\1\336\6\14"+
    "\6\0\1\14\23\0\1\14\3\0\16\14\1\u01bd\13\14"+
    "\6\0\1\14\23\0\1\14\21\0\1\u01be\51\0\16\14"+
    "\1\u01bf\13\14\6\0\1\14\23\0\1\14\21\0\1\u01c0"+
    "\51\0\16\14\1\u01c1\13\14\6\0\1\14\23\0\1\14"+
    "\3\0\1\u01c2\31\14\6\0\1\14\23\0\1\14\3\0"+
    "\1\u01c3\112\0\1\337\44\0\26\167\1\u01c4\3\167\6\0"+
    "\1\167\23\0\1\167\3\0\22\167\1\u01c5\7\167\2\0"+
    "\1\u01c6\3\0\1\167\23\0\1\167\3\0\16\167\1\u01c7"+
    "\13\167\6\0\1\167\23\0\1\167\3\0\4\167\1\u01c8"+
    "\25\167\6\0\1\167\23\0\1\167\7\0\1\u01c9\63\0"+
    "\15\167\1\u0156\14\167\6\0\1\167\23\0\1\167\20\0"+
    "\1\u0157\52\0\15\14\1\u0196\14\14\6\0\1\14\23\0"+
    "\1\14\20\0\1\u0199\52\0\15\14\1\u0148\14\14\6\0"+
    "\1\14\23\0\1\14\20\0\1\u0149\52\0\14\14\1\u01ca"+
    "\15\14\6\0\1\14\23\0\1\14\3\0\2\14\1\u014a"+
    "\27\14\6\0\1\14\23\0\1\14\5\0\1\u014c\65\0"+
    "\31\167\1\u01cb\6\0\1\167\23\0\1\167\3\0\17\167"+
    "\1\u01cc\12\167\6\0\1\167\23\0\1\167\22\0\1\u01cd"+
    "\50\0\21\167\1\u01ce\10\167\6\0\1\167\23\0\1\167"+
    "\3\0\23\167\1\u01cf\6\167\6\0\1\167\23\0\1\167"+
    "\26\0\1\u01d0\44\0\17\14\1\u01d1\12\14\6\0\1\14"+
    "\23\0\1\14\3\0\17\167\1\u01d2\12\167\6\0\1\167"+
    "\23\0\1\167\3\0\16\167\1\u01d3\13\167\6\0\1\167"+
    "\23\0\1\167\21\0\1\u01d4\51\0\14\167\1\u01d5\15\167"+
    "\6\0\1\167\23\0\1\167\3\0\32\167\6\0\1\167"+
    "\16\0\1\u01d6\4\0\1\167\62\0\1\u01d6\10\0\10\14"+
    "\1\u01d7\21\14\1\u01d8\5\0\1\14\23\0\1\14\3\0"+
    "\16\167\1\u01d9\13\167\6\0\1\167\23\0\1\167\3\0"+
    "\15\167\1\u01da\14\167\6\0\1\167\23\0\1\167\20\0"+
    "\1\u01db\52\0\22\167\1\u01dc\7\167\2\0\1\u01dd\3\0"+
    "\1\167\23\0\1\167\46\0\1\u01de\2\0\1\u01df\21\0"+
    "\13\14\1\u01e0\16\14\6\0\1\14\23\0\1\14\16\0"+
    "\1\u01e1\54\0\22\167\1\u01e2\7\167\2\0\1\u01e3\3\0"+
    "\1\167\23\0\1\167\3\0\22\167\1\u01e4\7\167\2\0"+
    "\1\u01e5\3\0\1\167\23\0\1\167\25\0\1\u01e5\11\0"+
    "\1\u01e5\33\0\6\167\1\u0156\23\167\6\0\1\167\23\0"+
    "\1\167\11\0\1\u0157\60\0\44\u01de\1\u01e6\1\0\1\u01e7"+
    "\21\u01de\45\u01df\1\0\1\u01e8\1\u01e6\20\u01df\1\0\4\14"+
    "\1\133\25\14\6\0\1\14\23\0\1\14\7\0\1\u01e9"+
    "\63\0\23\167\1\u01ea\6\167\6\0\1\167\23\0\1\167"+
    "\26\0\1\u01eb\44\0\4\167\1\u01ec\25\167\6\0\1\167"+
    "\23\0\1\167\7\0\1\u01ed\143\0\1\u01ee\6\0\44\u01de"+
    "\1\u01ef\1\0\1\u01e7\21\u01de\45\u01df\1\0\1\u01e8\1\u01f0"+
    "\20\u01df\22\0\1\63\46\0\31\167\1\u01f1\6\0\1\167"+
    "\23\0\1\167\34\0\1\u01f2\36\0\31\167\1\u01f3\6\0"+
    "\1\167\23\0\1\167\34\0\1\u01f4\35\0\44\u01de\1\u01e6"+
    "\1\0\1\u01e7\12\u01de\1\u01f5\6\u01de\45\u01df\1\0\1\u01e8"+
    "\1\u01e6\11\u01df\1\u01f6\6\u01df\1\0\3\167\1\u01f7\26\167"+
    "\6\0\1\167\23\0\1\167\6\0\1\u01f8\64\0\7\167"+
    "\1\u01f9\22\167\6\0\1\167\23\0\1\167\12\0\1\u01fa"+
    "\60\0\1\u01fb\31\167\6\0\1\167\23\0\1\167\3\0"+
    "\1\u01fc\67\0\4\167\1\u01fd\25\167\6\0\1\167\23\0"+
    "\1\167\7\0\1\u01fe\63\0\23\167\1\u01ff\6\167\6\0"+
    "\1\167\23\0\1\167\26\0\1\u0200\44\0\1\u0201\31\167"+
    "\6\0\1\167\23\0\1\167\3\0\1\u0202\67\0\1\u0156"+
    "\31\167\6\0\1\167\23\0\1\167\3\0\1\u0157\67\0"+
    "\3\167\1\u018c\26\167\6\0\1\167\23\0\1\167\6\0"+
    "\1\u018f\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\40\1\2\11\16\1\1\11\2\1\1\0"+
    "\5\1\1\0\12\1\1\0\6\1\1\0\1\1\1\0"+
    "\15\1\1\0\1\1\5\0\1\11\1\1\1\11\1\0"+
    "\1\1\7\0\1\11\4\0\10\1\1\0\3\1\1\0"+
    "\11\1\1\0\5\1\1\0\4\1\1\0\6\1\1\0"+
    "\1\1\1\0\4\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\10\1\5\0\1\1\5\0\2\1\1\0"+
    "\14\1\1\0\1\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\7\1\2\0\4\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\10\0\1\11\10\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\15\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\4\1\5\0\1\1\1\11\6\1\2\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\0\2\1\2\0\6\1"+
    "\3\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\2\0\5\1\1\0\1\1\1\0\3\1\3\0\6\1"+
    "\3\0\3\1\1\11\4\1\2\0\4\1\1\0\2\1"+
    "\2\0\2\1\1\0\1\1\1\0\2\1\2\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\5\0\1\1\1\0\1\1\1\0\1\11\2\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public Boolean bandera = true;
public File archivoSalida;
public File archivoError;
private RandomAccessFile raf;
private RandomAccessFile rafi; 
public void Abrir() throws FileNotFoundException{
    raf = new RandomAccessFile(archivoSalida,"rw");
}
public void AbrirError() throws FileNotFoundException{
    rafi = new RandomAccessFile(archivoError,"rw");
}
public void Cerrar() throws IOException{
    raf.close();
}
public void CerrarError() throws IOException{
    rafi.close();
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { bandera = false;
    try{rafi.writeBytes("Se encontro un error en la linea: "+ Integer.toString(yyline));} catch(IOException ex){}
    System.out.println("Se leyo un error "+ yyline);
            }
          case 14: break;
          case 2: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo una constante "+ yyline);
            }
          case 15: break;
          case 3: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un Operador "+ yyline);
            }
          case 16: break;
          case 4: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un tipo de dato "+ yyline);
            }
          case 17: break;
          case 5: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un caracter "+ yyline);
            }
          case 18: break;
          case 6: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un espacio "+ yyline);
            }
          case 19: break;
          case 7: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un comentario "+ yyline);
            }
          case 20: break;
          case 8: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){}
    System.out.println ("Se leyo una palabra reservada "+ yyline);
            }
          case 21: break;
          case 9: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo una etiqueta de php "+ yyline);
            }
          case 22: break;
          case 10: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo una variable "+ yyline);
            }
          case 23: break;
          case 11: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo una variable predeterminada "+ yyline);
            }
          case 24: break;
          case 12: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println ("Se leyo una constante en tiempo de compilacion "+ yyline);
            }
          case 25: break;
          case 13: 
            { try{raf.writeBytes(yytext());} catch(IOException ex){} 
    System.out.println("Se leyo un acceso a base de datos "+ yyline);
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
