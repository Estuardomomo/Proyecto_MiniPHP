/* The following code was generated by JFlex 1.6.1 */

class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/User_Len/Documents/GitHub/Proyecto_MiniPHP/miniPHP/src/miniPHP.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\47\1\65\1\65\1\65\23\0\1\54\1\51\1\64\1\67"+
    "\1\0\1\52\1\46\1\35\1\36\1\57\1\55\1\61\1\44\1\45"+
    "\1\56\1\43\1\43\6\43\2\43\1\0\1\61\1\40\1\60\1\42"+
    "\1\41\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12\1\62\1\50"+
    "\1\63\1\0\1\32\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\12"+
    "\1\61\1\53\1\61\1\0\6\12\1\66\172\12\60\0\2\33\115\0"+
    "\1\37\u1ea8\0\1\65\1\65\u0100\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\27\1\1\0\1\2\1\0\1\3\1\0\1\3"+
    "\1\4\1\3\5\0\4\3\1\5\1\0\3\1\2\6"+
    "\2\1\1\0\5\1\1\0\12\1\1\0\6\1\1\0"+
    "\1\1\1\0\13\1\1\0\3\1\1\0\1\1\5\0"+
    "\2\3\1\7\1\0\1\4\6\0\1\4\3\0\7\10"+
    "\1\1\1\0\3\1\1\0\10\1\1\0\2\1\1\0"+
    "\5\1\1\0\2\1\1\6\1\1\1\0\6\1\1\0"+
    "\1\1\1\0\4\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\10\1\5\0\1\4\5\0\2\4\1\0"+
    "\14\10\1\0\1\1\1\0\3\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\2\6\4\1"+
    "\2\0\4\1\1\0\6\1\1\0\4\1\1\0\3\1"+
    "\1\0\1\4\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\3\1\10\0\1\5\10\10\1\0\4\10\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\4\1\1\6"+
    "\1\1\1\6\7\1\2\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\4\1\5\0\2\11\6\10\2\0\3\10"+
    "\2\0\1\1\1\0\1\1\1\0\3\1\2\0\6\1"+
    "\3\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\2\0\5\10\1\0\1\10\1\0\3\10\3\0\2\1"+
    "\1\6\3\1\3\0\1\1\1\6\2\12\4\1\2\0"+
    "\4\10\1\0\2\10\2\0\2\1\1\0\1\1\1\0"+
    "\2\1\2\0\4\10\1\0\1\10\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\10\1\0\2\10\1\0"+
    "\1\1\2\10\1\0\2\10\1\0\1\1\2\10\1\0"+
    "\1\10\1\0\1\1\1\0\2\10\1\0\1\10\3\0"+
    "\1\1\1\0\1\10\1\0\1\10\5\0\1\10\1\0"+
    "\1\10\1\0\1\13\2\0\1\10\1\0\1\10\1\0"+
    "\2\13\1\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0230\0\u0578"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u0578\0\u1538\0\u0578\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u0578\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u0738\0\u0770\0\u2990\0\u29c8"+
    "\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48"+
    "\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\u3640\0\u3678\0\u36b0\0\u0230\0\u36e8\0\u3720\0\u3758\0\u3790"+
    "\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950"+
    "\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10"+
    "\0\u3b48\0\u0578\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58"+
    "\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520\0\u4558"+
    "\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718"+
    "\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0\0\u48d8"+
    "\0\u4910\0\u1810\0\u0578\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28"+
    "\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8"+
    "\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8"+
    "\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68"+
    "\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128"+
    "\0\u5160\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8"+
    "\0\u5320\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8"+
    "\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668"+
    "\0\u56a0\0\u56d8\0\u5710\0\u5748\0\u5780\0\u57b8\0\u57f0\0\u5828"+
    "\0\u0230\0\u0578\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978"+
    "\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38"+
    "\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8"+
    "\0\u5d30\0\u5d68\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u5e80\0\u5eb8"+
    "\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078"+
    "\0\u60b0\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238"+
    "\0\u6270\0\u62a8\0\u62e0\0\u6318\0\u6350\0\u6388\0\u63c0\0\u63f8"+
    "\0\u6430\0\u6468\0\u64a0\0\u64d8\0\u6510\0\u6548\0\u6580\0\u65b8"+
    "\0\u65f0\0\u6628\0\u6660\0\u6698\0\u66d0\0\u6708\0\u6740\0\u6778"+
    "\0\u67b0\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8\0\u6900\0\u6938"+
    "\0\u6970\0\u69a8\0\u0578\0\u69e0\0\u6a18\0\u6a50\0\u6a88\0\u6ac0"+
    "\0\u6af8\0\u6660\0\u6698\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10"+
    "\0\u6c48\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\2\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\13\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\0\2\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\46\3\32\1\52"+
    "\1\0\1\13\1\53\1\0\1\13\1\54\13\13\1\55"+
    "\3\13\1\56\1\57\7\13\4\0\1\60\3\0\1\13"+
    "\22\0\1\13\2\0\10\13\1\61\10\13\1\62\10\13"+
    "\1\63\7\0\1\13\22\0\1\13\2\0\1\64\12\13"+
    "\1\65\2\13\1\66\13\13\10\0\1\13\22\0\1\13"+
    "\2\0\4\13\1\67\3\13\1\70\5\13\1\57\13\13"+
    "\1\71\7\0\1\13\22\0\1\13\2\0\2\13\1\72"+
    "\10\13\1\73\1\74\1\75\7\13\1\76\1\13\1\77"+
    "\2\13\10\0\1\13\22\0\1\13\2\0\1\100\7\13"+
    "\1\101\5\13\1\102\5\13\1\103\5\13\1\104\7\0"+
    "\1\13\22\0\1\13\2\0\13\13\1\105\2\13\1\106"+
    "\13\13\10\0\1\13\22\0\1\13\2\0\4\13\1\107"+
    "\25\13\10\0\1\13\22\0\1\13\2\0\5\13\1\57"+
    "\6\13\1\110\1\111\4\13\1\112\7\13\4\0\1\113"+
    "\3\0\1\13\22\0\1\13\2\0\32\13\10\0\1\13"+
    "\22\0\1\13\2\0\10\13\1\114\21\13\1\115\7\0"+
    "\1\13\22\0\1\13\2\0\1\116\3\13\1\117\25\13"+
    "\10\0\1\13\22\0\1\13\2\0\2\13\1\120\16\13"+
    "\1\57\10\13\10\0\1\13\22\0\1\13\2\0\21\13"+
    "\1\121\2\13\1\122\5\13\10\0\1\13\22\0\1\13"+
    "\2\0\4\13\1\123\25\13\10\0\1\13\22\0\1\13"+
    "\2\0\23\13\1\124\2\13\1\125\3\13\10\0\1\13"+
    "\22\0\1\13\2\0\7\13\1\126\11\13\1\127\10\13"+
    "\10\0\1\13\22\0\1\13\2\0\15\13\1\112\4\13"+
    "\1\130\7\13\4\0\1\131\3\0\1\13\22\0\1\13"+
    "\2\0\1\132\31\13\10\0\1\13\22\0\1\13\2\0"+
    "\7\13\1\133\22\13\10\0\1\13\22\0\1\13\2\0"+
    "\16\13\1\132\13\13\10\0\1\13\22\0\1\13\2\0"+
    "\10\13\1\134\21\13\1\135\7\0\1\13\22\0\1\13"+
    "\2\0\31\13\1\136\10\0\1\13\22\0\1\13\7\0"+
    "\1\60\6\0\1\137\1\140\4\0\1\113\13\0\1\113"+
    "\144\0\1\141\2\0\1\142\101\0\1\143\1\144\15\0"+
    "\1\145\50\0\1\144\1\146\105\0\1\144\14\0\1\147"+
    "\35\0\1\37\1\0\1\150\24\0\1\151\1\0\1\152"+
    "\3\0\1\153\6\0\1\154\23\0\1\155\1\144\1\156"+
    "\12\0\1\144\52\0\1\150\24\0\46\42\1\157\1\0"+
    "\1\160\17\42\47\43\1\0\1\161\1\157\16\43\52\0"+
    "\1\144\70\0\1\144\74\0\1\36\11\0\1\151\1\0"+
    "\1\152\3\0\1\153\6\0\1\154\23\0\1\155\1\0"+
    "\1\156\7\0\1\144\2\0\1\144\65\0\1\52\1\162"+
    "\1\144\66\0\2\144\7\0\47\52\1\0\15\52\2\0"+
    "\1\52\1\0\1\163\5\164\1\165\1\166\7\164\1\167"+
    "\1\164\1\170\7\164\1\171\33\0\1\164\2\0\22\13"+
    "\1\172\7\13\4\0\1\173\3\0\1\13\22\0\1\13"+
    "\2\0\3\13\1\57\26\13\10\0\1\13\22\0\1\13"+
    "\2\0\21\13\1\174\10\13\10\0\1\13\22\0\1\13"+
    "\2\0\15\13\1\175\14\13\10\0\1\13\22\0\1\13"+
    "\2\0\4\13\1\176\25\13\10\0\1\13\22\0\1\13"+
    "\17\0\1\177\52\0\13\13\1\200\6\13\1\130\1\201"+
    "\6\13\4\0\1\131\3\0\1\13\22\0\1\13\2\0"+
    "\1\202\15\13\1\203\13\13\10\0\1\13\22\0\1\13"+
    "\2\0\15\13\1\204\14\13\10\0\1\13\22\0\1\13"+
    "\2\0\2\13\1\205\2\13\1\206\24\13\10\0\1\13"+
    "\22\0\1\13\2\0\4\13\1\207\25\13\10\0\1\13"+
    "\22\0\1\13\6\0\1\210\63\0\7\13\1\211\22\13"+
    "\10\0\1\13\22\0\1\13\2\0\22\13\1\212\7\13"+
    "\4\0\1\213\3\0\1\13\22\0\1\13\2\0\17\13"+
    "\1\214\12\13\10\0\1\13\22\0\1\13\2\0\3\13"+
    "\1\215\26\13\10\0\1\13\22\0\1\13\2\0\1\216"+
    "\31\13\10\0\1\13\22\0\1\13\2\0\10\13\1\217"+
    "\12\13\1\220\6\13\1\221\7\0\1\13\22\0\1\13"+
    "\2\0\13\13\1\222\16\13\10\0\1\13\22\0\1\13"+
    "\2\0\15\13\1\223\14\13\10\0\1\13\22\0\1\13"+
    "\2\0\21\13\1\224\10\13\10\0\1\13\22\0\1\13"+
    "\2\0\15\13\1\225\14\13\10\0\1\13\22\0\1\13"+
    "\17\0\1\226\52\0\16\13\1\227\13\13\10\0\1\13"+
    "\22\0\1\13\2\0\23\13\1\211\6\13\10\0\1\13"+
    "\22\0\1\13\2\0\27\13\1\230\2\13\10\0\1\13"+
    "\22\0\1\13\2\0\17\13\1\231\12\13\10\0\1\13"+
    "\22\0\1\13\2\0\2\13\1\232\17\13\1\233\1\234"+
    "\6\13\4\0\1\235\3\0\1\13\22\0\1\13\2\0"+
    "\22\13\1\236\7\13\4\0\1\237\3\0\1\13\22\0"+
    "\1\13\24\0\1\237\13\0\1\237\31\0\22\13\1\217"+
    "\7\13\4\0\1\221\3\0\1\13\22\0\1\13\24\0"+
    "\1\221\13\0\1\221\31\0\14\13\1\240\15\13\10\0"+
    "\1\13\22\0\1\13\2\0\26\13\1\57\3\13\10\0"+
    "\1\13\22\0\1\13\2\0\23\13\1\241\6\13\10\0"+
    "\1\13\22\0\1\13\2\0\10\13\1\242\5\13\1\243"+
    "\13\13\1\244\7\0\1\13\22\0\1\13\2\0\1\13"+
    "\1\245\30\13\10\0\1\13\22\0\1\13\2\0\20\13"+
    "\1\246\2\13\1\247\6\13\10\0\1\13\22\0\1\13"+
    "\2\0\1\250\31\13\10\0\1\13\22\0\1\13\2\0"+
    "\10\13\1\251\21\13\1\252\7\0\1\13\22\0\1\13"+
    "\2\0\21\13\1\253\10\13\10\0\1\13\22\0\1\13"+
    "\2\0\1\254\23\13\1\255\3\13\1\57\1\13\10\0"+
    "\1\13\22\0\1\13\2\0\4\13\1\57\25\13\10\0"+
    "\1\13\22\0\1\13\6\0\1\60\63\0\21\13\1\57"+
    "\10\13\10\0\1\13\22\0\1\13\2\0\10\13\1\256"+
    "\21\13\1\257\7\0\1\13\22\0\1\13\2\0\4\13"+
    "\1\260\25\13\10\0\1\13\22\0\1\13\6\0\1\261"+
    "\63\0\2\13\1\262\1\263\1\13\1\264\1\13\1\265"+
    "\3\13\1\266\1\267\1\270\5\13\1\271\6\13\10\0"+
    "\1\13\22\0\1\13\21\0\1\272\52\0\1\273\17\0"+
    "\1\235\1\274\12\0\1\235\31\0\1\275\77\0\1\252"+
    "\21\0\1\252\54\0\1\276\111\0\1\144\70\0\1\277"+
    "\1\300\10\0\1\300\17\0\1\147\35\0\1\150\35\0"+
    "\1\63\21\0\1\63\41\0\1\301\67\0\1\302\65\0"+
    "\1\303\71\0\1\147\35\0\1\155\1\0\1\304\65\0"+
    "\1\304\24\0\46\42\1\305\1\0\1\160\17\42\47\43"+
    "\1\0\1\161\1\306\16\43\56\162\1\0\1\307\10\162"+
    "\1\0\21\164\1\310\10\164\10\0\1\164\22\0\1\164"+
    "\2\0\32\164\10\0\1\164\22\0\1\164\2\0\13\164"+
    "\1\311\16\164\10\0\1\164\22\0\1\164\2\0\23\164"+
    "\1\312\6\164\10\0\1\164\22\0\1\164\2\0\7\164"+
    "\1\313\22\164\10\0\1\164\22\0\1\164\2\0\4\164"+
    "\1\314\25\164\10\0\1\164\22\0\1\164\2\0\2\164"+
    "\1\315\1\164\1\316\1\317\1\320\10\164\1\321\1\164"+
    "\1\322\1\323\7\164\4\0\1\324\3\0\1\164\22\0"+
    "\1\164\2\0\23\13\1\325\6\13\10\0\1\13\22\0"+
    "\1\13\25\0\1\326\44\0\1\327\31\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\330\31\13\10\0\1\13\22\0"+
    "\1\13\2\0\1\331\31\13\10\0\1\13\22\0\1\13"+
    "\2\0\1\332\67\0\13\13\1\333\16\13\10\0\1\13"+
    "\22\0\1\13\2\0\2\13\1\334\27\13\10\0\1\13"+
    "\22\0\1\13\2\0\22\13\1\335\7\13\4\0\1\336"+
    "\3\0\1\13\22\0\1\13\2\0\15\13\1\130\14\13"+
    "\10\0\1\13\22\0\1\13\2\0\22\13\1\337\1\340"+
    "\6\13\4\0\1\341\3\0\1\13\22\0\1\13\2\0"+
    "\10\13\1\342\2\13\1\343\16\13\1\344\7\0\1\13"+
    "\22\0\1\13\2\0\1\345\31\13\10\0\1\13\22\0"+
    "\1\13\2\0\32\13\2\0\1\346\5\0\1\13\22\0"+
    "\1\13\36\0\1\346\33\0\16\13\1\57\13\13\10\0"+
    "\1\13\22\0\1\13\2\0\4\13\1\347\25\13\10\0"+
    "\1\13\22\0\1\13\6\0\1\350\63\0\23\13\1\327"+
    "\6\13\10\0\1\13\22\0\1\13\2\0\3\13\1\351"+
    "\1\13\1\352\2\13\1\353\11\13\1\354\3\13\1\25"+
    "\3\13\1\355\3\0\1\356\3\0\1\13\22\0\1\13"+
    "\2\0\13\13\1\207\16\13\10\0\1\13\22\0\1\13"+
    "\2\0\23\13\1\207\6\13\10\0\1\13\22\0\1\13"+
    "\2\0\4\13\1\357\25\13\10\0\1\13\22\0\1\13"+
    "\25\0\1\210\44\0\22\13\1\255\7\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\360\31\13\10\0\1\13\22\0"+
    "\1\13\2\0\4\13\1\361\25\13\10\0\1\13\22\0"+
    "\1\13\2\0\2\13\1\362\27\13\10\0\1\13\22\0"+
    "\1\13\2\0\1\363\67\0\1\13\1\364\30\13\10\0"+
    "\1\13\22\0\1\13\2\0\1\365\31\13\10\0\1\13"+
    "\22\0\1\13\2\0\13\13\1\366\16\13\10\0\1\13"+
    "\22\0\1\13\2\0\13\13\1\367\16\13\10\0\1\13"+
    "\22\0\1\13\2\0\23\13\1\370\6\13\10\0\1\13"+
    "\22\0\1\13\2\0\4\13\1\371\25\13\10\0\1\13"+
    "\22\0\1\13\25\0\1\372\44\0\4\13\1\217\25\13"+
    "\10\0\1\13\22\0\1\13\6\0\1\221\63\0\4\13"+
    "\1\373\25\13\10\0\1\13\22\0\1\13\2\0\1\374"+
    "\31\13\10\0\1\13\22\0\1\13\2\0\15\13\1\337"+
    "\7\13\1\375\4\13\10\0\1\13\22\0\1\13\2\0"+
    "\23\13\1\376\6\13\10\0\1\13\22\0\1\13\17\0"+
    "\1\341\7\0\1\377\42\0\13\13\1\u0100\16\13\10\0"+
    "\1\13\22\0\1\13\2\0\24\13\1\u0101\5\13\10\0"+
    "\1\13\22\0\1\13\2\0\24\13\1\u0102\5\13\10\0"+
    "\1\13\22\0\1\13\2\0\23\13\1\u0100\6\13\10\0"+
    "\1\13\22\0\1\13\2\0\23\13\1\201\6\13\10\0"+
    "\1\13\22\0\1\13\25\0\1\u0103\44\0\16\13\1\117"+
    "\13\13\10\0\1\13\22\0\1\13\2\0\10\13\1\337"+
    "\21\13\1\341\7\0\1\13\22\0\1\13\2\0\4\13"+
    "\1\u0104\25\13\10\0\1\13\22\0\1\13\2\0\13\13"+
    "\1\130\16\13\10\0\1\13\22\0\1\13\15\0\1\131"+
    "\54\0\13\13\1\55\16\13\10\0\1\13\22\0\1\13"+
    "\15\0\1\u0105\54\0\13\13\1\u0106\16\13\10\0\1\13"+
    "\22\0\1\13\2\0\10\13\1\u0107\21\13\1\u0108\7\0"+
    "\1\13\22\0\1\13\2\0\10\13\1\u0109\13\13\1\u010a"+
    "\5\13\1\u010b\7\0\1\13\22\0\1\13\2\0\1\u010c"+
    "\31\13\10\0\1\13\22\0\1\13\2\0\10\13\1\u010d"+
    "\21\13\1\u010e\7\0\1\13\22\0\1\13\2\0\4\13"+
    "\1\u010f\25\13\10\0\1\13\22\0\1\13\2\0\1\u0110"+
    "\31\13\10\0\1\13\22\0\1\13\2\0\21\13\1\u0111"+
    "\10\13\10\0\1\13\22\0\1\13\15\0\1\u0112\67\0"+
    "\1\u0113\60\0\1\u0114\106\0\1\u0115\53\0\1\u0116\122\0"+
    "\1\277\27\0\1\u0117\114\0\1\u0118\63\0\1\u0119\50\0"+
    "\1\147\35\0\1\304\102\0\1\u011a\12\0\6\164\1\u011b"+
    "\23\164\10\0\1\164\22\0\1\164\2\0\16\164\1\u011c"+
    "\13\164\10\0\1\164\22\0\1\164\2\0\23\164\1\u011d"+
    "\6\164\10\0\1\164\22\0\1\164\2\0\17\164\1\u011e"+
    "\12\164\10\0\1\164\22\0\1\164\2\0\2\164\1\u011f"+
    "\27\164\10\0\1\164\22\0\1\164\2\0\16\164\1\u0120"+
    "\13\164\10\0\1\164\22\0\1\164\2\0\15\164\1\u0121"+
    "\14\164\10\0\1\164\22\0\1\164\2\0\10\164\1\u0122"+
    "\21\164\1\u0123\7\0\1\164\22\0\1\164\2\0\4\164"+
    "\1\u0124\25\164\10\0\1\164\22\0\1\164\2\0\16\164"+
    "\1\u0125\13\164\10\0\1\164\22\0\1\164\2\0\4\164"+
    "\1\u0126\25\164\10\0\1\164\22\0\1\164\2\0\4\164"+
    "\1\u0127\25\164\10\0\1\164\22\0\1\164\6\0\1\u0128"+
    "\63\0\21\13\1\u0129\10\13\10\0\1\13\22\0\1\13"+
    "\23\0\1\u012a\46\0\30\13\1\207\1\13\10\0\1\13"+
    "\22\0\1\13\2\0\21\13\1\u012b\10\13\10\0\1\13"+
    "\22\0\1\13\2\0\12\13\1\57\17\13\1\0\1\60"+
    "\6\0\1\13\22\0\1\13\23\0\1\u012c\46\0\1\u012d"+
    "\31\13\10\0\1\13\22\0\1\13\2\0\7\13\1\57"+
    "\22\13\10\0\1\13\22\0\1\13\2\0\22\13\1\57"+
    "\7\13\4\0\1\60\3\0\1\13\22\0\1\13\24\0"+
    "\1\60\13\0\1\60\31\0\23\13\1\57\6\13\10\0"+
    "\1\13\22\0\1\13\2\0\10\13\1\u012e\21\13\1\u012f"+
    "\7\0\1\13\22\0\1\13\25\0\1\60\44\0\14\13"+
    "\1\241\15\13\10\0\1\13\22\0\1\13\2\0\1\u0130"+
    "\31\13\10\0\1\13\22\0\1\13\16\0\1\u0119\53\0"+
    "\24\13\1\u0131\5\13\10\0\1\13\22\0\1\13\37\0"+
    "\1\60\32\0\10\13\1\353\21\13\1\355\7\0\1\13"+
    "\22\0\1\13\12\0\1\355\21\0\1\355\35\0\4\13"+
    "\1\u0132\25\13\10\0\1\13\22\0\1\13\2\0\16\13"+
    "\1\102\13\13\10\0\1\13\22\0\1\13\2\0\5\13"+
    "\1\57\24\13\10\0\1\13\22\0\1\13\2\0\26\13"+
    "\1\125\3\13\10\0\1\13\22\0\1\13\7\0\1\60"+
    "\110\0\1\142\41\0\15\13\1\u0133\14\13\10\0\1\13"+
    "\22\0\1\13\2\0\13\13\1\u0134\16\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\201\31\13\10\0\1\13\22\0"+
    "\1\13\2\0\23\13\1\u0135\6\13\10\0\1\13\22\0"+
    "\1\13\15\0\1\u0136\54\0\1\u0137\31\13\10\0\1\13"+
    "\22\0\1\13\2\0\3\13\1\u0138\26\13\10\0\1\13"+
    "\22\0\1\13\2\0\4\13\1\u0139\25\13\10\0\1\13"+
    "\22\0\1\13\2\0\24\13\1\u013a\5\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\u013b\3\13\1\u013c\25\13\10\0"+
    "\1\13\22\0\1\13\2\0\21\13\1\u013d\10\13\10\0"+
    "\1\13\22\0\1\13\2\0\1\u013e\3\0\1\u013f\63\0"+
    "\22\13\1\u0140\7\13\4\0\1\u0141\3\0\1\13\22\0"+
    "\1\13\2\0\13\13\1\u0104\16\13\10\0\1\13\22\0"+
    "\1\13\2\0\1\u0142\31\13\10\0\1\13\22\0\1\13"+
    "\2\0\4\13\1\u0143\25\13\10\0\1\13\22\0\1\13"+
    "\2\0\1\u0144\67\0\10\13\1\u0145\21\13\1\u0146\7\0"+
    "\1\13\22\0\1\13\2\0\10\13\1\u0147\21\13\1\u0148"+
    "\7\0\1\13\22\0\1\13\2\0\21\13\1\u0149\10\13"+
    "\10\0\1\13\22\0\1\13\4\0\1\u014a\70\0\1\60"+
    "\64\0\1\u014b\31\13\10\0\1\13\22\0\1\13\2\0"+
    "\21\13\1\u014c\10\13\10\0\1\13\22\0\1\13\23\0"+
    "\1\u014d\46\0\13\13\1\u014e\16\13\10\0\1\13\22\0"+
    "\1\13\2\0\15\13\1\u014f\14\13\10\0\1\13\22\0"+
    "\1\13\15\0\1\u0150\54\0\13\13\1\u0151\16\13\10\0"+
    "\1\13\22\0\1\13\2\0\15\13\1\u014e\14\13\10\0"+
    "\1\13\22\0\1\13\17\0\1\u0150\52\0\23\13\1\u0152"+
    "\6\13\10\0\1\13\22\0\1\13\2\0\14\13\1\u0153"+
    "\15\13\10\0\1\13\22\0\1\13\2\0\1\u0154\31\13"+
    "\10\0\1\13\22\0\1\13\6\0\1\u0155\107\0\1\u0156"+
    "\64\0\1\u0157\56\0\1\u0146\21\0\1\u0146\54\0\1\146"+
    "\60\0\1\344\21\0\1\344\35\0\1\u0158\67\0\1\u0159"+
    "\67\0\2\164\1\u015a\17\164\1\u015a\2\164\1\u015a\4\164"+
    "\4\0\1\u015b\3\0\1\164\22\0\1\164\2\0\1\164"+
    "\1\u015c\30\164\10\0\1\164\22\0\1\164\2\0\17\164"+
    "\1\u015d\12\164\10\0\1\164\22\0\1\164\2\0\31\164"+
    "\1\u015e\10\0\1\164\22\0\1\164\2\0\16\164\1\u015f"+
    "\13\164\10\0\1\164\22\0\1\164\2\0\16\164\1\u0160"+
    "\13\164\10\0\1\164\22\0\1\164\2\0\25\164\1\u015a"+
    "\4\164\10\0\1\164\22\0\1\164\2\0\13\164\1\u0161"+
    "\16\164\10\0\1\164\22\0\1\164\15\0\1\u0162\54\0"+
    "\23\164\1\u015a\6\164\10\0\1\164\22\0\1\164\2\0"+
    "\22\164\1\u0124\7\164\4\0\1\u0163\3\0\1\164\22\0"+
    "\1\164\2\0\20\164\1\u0164\11\164\10\0\1\164\22\0"+
    "\1\164\2\0\21\164\1\u0165\1\u0166\7\164\4\0\1\u0167"+
    "\3\0\1\164\22\0\1\164\23\0\1\u0168\1\u0167\13\0"+
    "\1\u0167\31\0\1\u0169\31\13\10\0\1\13\22\0\1\13"+
    "\2\0\1\u016a\67\0\30\13\1\u0104\1\13\10\0\1\13"+
    "\22\0\1\13\32\0\1\157\37\0\1\13\1\256\30\13"+
    "\10\0\1\13\22\0\1\13\2\0\15\13\1\u016b\14\13"+
    "\10\0\1\13\22\0\1\13\17\0\1\u016c\52\0\21\13"+
    "\1\130\10\13\10\0\1\13\22\0\1\13\2\0\13\13"+
    "\1\337\16\13\10\0\1\13\22\0\1\13\2\0\2\13"+
    "\1\u016d\27\13\10\0\1\13\22\0\1\13\2\0\3\13"+
    "\1\335\26\13\10\0\1\13\22\0\1\13\2\0\13\13"+
    "\1\u016e\16\13\10\0\1\13\22\0\1\13\2\0\10\13"+
    "\1\u016f\21\13\1\u0170\7\0\1\13\22\0\1\13\15\0"+
    "\1\u0171\54\0\13\13\1\57\16\13\10\0\1\13\22\0"+
    "\1\13\2\0\4\13\1\u0172\25\13\10\0\1\13\22\0"+
    "\1\13\2\0\14\13\1\u0173\15\13\10\0\1\13\22\0"+
    "\1\13\2\0\3\13\1\u0174\26\13\10\0\1\13\22\0"+
    "\1\13\2\0\15\13\1\u0175\14\13\10\0\1\13\22\0"+
    "\1\13\2\0\1\u0176\31\13\10\0\1\13\22\0\1\13"+
    "\2\0\5\13\1\u0177\24\13\10\0\1\13\22\0\1\13"+
    "\17\0\1\u0178\52\0\1\u0179\67\0\17\13\1\u0177\12\13"+
    "\10\0\1\13\22\0\1\13\21\0\1\u017a\50\0\23\13"+
    "\1\130\6\13\10\0\1\13\22\0\1\13\2\0\2\13"+
    "\1\u017b\27\13\10\0\1\13\22\0\1\13\25\0\1\131"+
    "\44\0\2\13\1\57\27\13\10\0\1\13\22\0\1\13"+
    "\4\0\1\60\65\0\21\13\1\u0174\10\13\10\0\1\13"+
    "\22\0\1\13\23\0\1\u017c\46\0\15\13\1\57\14\13"+
    "\10\0\1\13\22\0\1\13\11\0\1\60\60\0\22\13"+
    "\1\u017d\7\13\4\0\1\u017e\3\0\1\13\22\0\1\13"+
    "\2\0\31\13\1\u017f\10\0\1\13\22\0\1\13\33\0"+
    "\1\u0180\36\0\4\13\1\u014c\25\13\10\0\1\13\22\0"+
    "\1\13\2\0\2\13\1\u0181\27\13\10\0\1\13\22\0"+
    "\1\13\6\0\1\u014d\63\0\23\13\1\u0182\6\13\10\0"+
    "\1\13\22\0\1\13\2\0\7\13\1\u0183\22\13\10\0"+
    "\1\13\22\0\1\13\2\0\4\13\1\u0184\25\13\10\0"+
    "\1\13\22\0\1\13\2\0\10\13\1\u0185\21\13\1\u0186"+
    "\7\0\1\13\22\0\1\13\16\0\1\u0187\56\0\1\u017c"+
    "\71\0\1\u017a\65\0\1\152\77\0\1\157\54\0\1\u0188"+
    "\31\164\10\0\1\164\22\0\1\164\2\0\31\164\1\u0189"+
    "\10\0\1\164\22\0\1\164\2\0\4\164\1\u018a\25\164"+
    "\10\0\1\164\22\0\1\164\2\0\21\164\1\u018b\10\164"+
    "\10\0\1\164\22\0\1\164\2\0\12\164\1\u018c\17\164"+
    "\1\0\1\u018d\6\0\1\164\22\0\1\164\2\0\4\164"+
    "\1\u018e\25\164\10\0\1\164\22\0\1\164\6\0\1\u018f"+
    "\106\0\1\u015b\44\0\24\164\1\u0190\5\164\10\0\1\164"+
    "\22\0\1\164\2\0\25\164\1\u0191\4\164\10\0\1\164"+
    "\22\0\1\164\2\0\22\164\1\u0192\7\164\4\0\1\u0193"+
    "\3\0\1\164\22\0\1\164\24\0\1\u0193\13\0\1\u0193"+
    "\56\0\1\u0194\42\0\2\13\1\337\27\13\10\0\1\13"+
    "\22\0\1\13\4\0\1\341\65\0\24\13\1\130\5\13"+
    "\10\0\1\13\22\0\1\13\26\0\1\131\43\0\13\13"+
    "\1\343\16\13\10\0\1\13\22\0\1\13\2\0\30\13"+
    "\1\57\1\13\10\0\1\13\22\0\1\13\2\0\16\13"+
    "\1\u0149\13\13\10\0\1\13\22\0\1\13\20\0\1\u0195"+
    "\101\0\1\60\37\0\2\13\1\u0196\27\13\10\0\1\13"+
    "\22\0\1\13\2\0\4\13\1\u0197\25\13\10\0\1\13"+
    "\22\0\1\13\2\0\4\13\1\u0198\25\13\10\0\1\13"+
    "\22\0\1\13\2\0\2\13\1\u0199\27\13\10\0\1\13"+
    "\22\0\1\13\2\0\3\13\1\u019a\26\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\u019b\31\13\10\0\1\13\22\0"+
    "\1\13\4\0\1\u019c\70\0\1\u019d\64\0\1\u019e\67\0"+
    "\23\13\1\u019f\6\13\10\0\1\13\22\0\1\13\6\0"+
    "\1\u01a0\63\0\22\13\1\u014c\7\13\4\0\1\u014d\3\0"+
    "\1\13\22\0\1\13\24\0\1\u014d\13\0\1\u014d\31\0"+
    "\31\13\1\u01a1\10\0\1\13\22\0\1\13\33\0\1\u01a2"+
    "\36\0\23\13\1\u01a3\6\13\10\0\1\13\22\0\1\13"+
    "\2\0\31\13\1\u01a4\10\0\1\13\22\0\1\13\2\0"+
    "\16\13\1\u01a5\13\13\10\0\1\13\22\0\1\13\2\0"+
    "\22\13\1\u01a6\7\13\4\0\1\u01a7\3\0\1\13\22\0"+
    "\1\13\2\0\23\13\1\u014c\6\13\10\0\1\13\22\0"+
    "\1\13\25\0\1\u014d\50\0\1\u01a8\63\0\13\164\1\u018e"+
    "\16\164\10\0\1\164\22\0\1\164\2\0\21\164\1\u01a9"+
    "\10\164\10\0\1\164\22\0\1\164\2\0\21\164\1\u01aa"+
    "\10\164\10\0\1\164\22\0\1\164\2\0\3\164\1\u01ab"+
    "\26\164\10\0\1\164\22\0\1\164\2\0\10\164\1\u01ac"+
    "\21\164\1\u01ad\7\0\1\164\22\0\1\164\12\0\1\u01ad"+
    "\21\0\1\u01ad\35\0\22\164\1\u015a\7\164\4\0\1\u015b"+
    "\3\0\1\164\22\0\1\164\24\0\1\u015b\13\0\1\u015b"+
    "\31\0\4\164\1\u0125\25\164\10\0\1\164\22\0\1\164"+
    "\2\0\4\164\1\u01ae\25\164\10\0\1\164\22\0\1\164"+
    "\2\0\10\164\1\u01af\21\164\1\u01b0\7\0\1\164\22\0"+
    "\1\164\12\0\1\u01b0\21\0\1\u01b0\41\0\1\u01b1\100\0"+
    "\1\60\52\0\10\13\1\342\21\13\1\344\7\0\1\13"+
    "\22\0\1\13\2\0\15\13\1\u01b2\14\13\10\0\1\13"+
    "\22\0\1\13\2\0\31\13\1\u01b3\10\0\1\13\22\0"+
    "\1\13\2\0\4\13\1\u019a\25\13\10\0\1\13\22\0"+
    "\1\13\2\0\16\13\1\353\13\13\10\0\1\13\22\0"+
    "\1\13\2\0\2\13\1\130\27\13\10\0\1\13\22\0"+
    "\1\13\6\0\1\u019d\101\0\1\355\53\0\1\131\65\0"+
    "\4\13\1\55\25\13\10\0\1\13\22\0\1\13\33\0"+
    "\1\u01b4\36\0\10\13\1\u01b5\21\13\1\u01b6\7\0\1\13"+
    "\22\0\1\13\2\0\2\13\1\u01b7\27\13\10\0\1\13"+
    "\22\0\1\13\2\0\3\13\1\u014c\26\13\10\0\1\13"+
    "\22\0\1\13\2\0\17\13\1\u01b8\12\13\10\0\1\13"+
    "\22\0\1\13\21\0\1\u01b9\65\0\1\u01ba\52\0\1\u01bb"+
    "\3\164\1\u01bc\25\164\10\0\1\164\22\0\1\164\2\0"+
    "\21\164\1\u01bd\10\164\10\0\1\164\22\0\1\164\2\0"+
    "\22\164\1\u01be\7\164\4\0\1\u01bf\3\0\1\164\22\0"+
    "\1\164\2\0\4\164\1\u015a\25\164\10\0\1\164\22\0"+
    "\1\164\6\0\1\u015b\63\0\21\164\1\u015a\10\164\10\0"+
    "\1\164\22\0\1\164\2\0\16\164\1\u01c0\13\164\10\0"+
    "\1\164\22\0\1\164\20\0\1\u01c1\72\0\1\u015b\46\0"+
    "\23\13\1\335\6\13\10\0\1\13\22\0\1\13\2\0"+
    "\16\13\1\u01c2\13\13\10\0\1\13\22\0\1\13\20\0"+
    "\1\u01c3\51\0\16\13\1\u01c4\13\13\10\0\1\13\22\0"+
    "\1\13\20\0\1\u01c5\51\0\16\13\1\u01c6\13\13\10\0"+
    "\1\13\22\0\1\13\2\0\1\u01c7\31\13\10\0\1\13"+
    "\22\0\1\13\2\0\1\u01c8\112\0\1\336\44\0\26\164"+
    "\1\u01c9\3\164\10\0\1\164\22\0\1\164\2\0\22\164"+
    "\1\u01ca\7\164\4\0\1\u01cb\3\0\1\164\22\0\1\164"+
    "\2\0\16\164\1\u01cc\13\164\10\0\1\164\22\0\1\164"+
    "\2\0\4\164\1\u01cd\25\164\10\0\1\164\22\0\1\164"+
    "\6\0\1\u01ce\63\0\15\164\1\u015a\14\164\10\0\1\164"+
    "\22\0\1\164\17\0\1\u015b\52\0\15\13\1\u019b\14\13"+
    "\10\0\1\13\22\0\1\13\17\0\1\u019e\52\0\15\13"+
    "\1\u014c\14\13\10\0\1\13\22\0\1\13\17\0\1\u014d"+
    "\52\0\14\13\1\u01cf\15\13\10\0\1\13\22\0\1\13"+
    "\2\0\2\13\1\u014e\27\13\10\0\1\13\22\0\1\13"+
    "\4\0\1\u0150\65\0\31\164\1\u01d0\10\0\1\164\22\0"+
    "\1\164\2\0\17\164\1\u01d1\12\164\10\0\1\164\22\0"+
    "\1\164\21\0\1\u01d2\50\0\21\164\1\u01d3\10\164\10\0"+
    "\1\164\22\0\1\164\2\0\23\164\1\u01d4\6\164\10\0"+
    "\1\164\22\0\1\164\25\0\1\u01d5\44\0\17\13\1\u01d6"+
    "\12\13\10\0\1\13\22\0\1\13\2\0\17\164\1\u01d7"+
    "\12\164\10\0\1\164\22\0\1\164\2\0\16\164\1\u01d8"+
    "\13\164\10\0\1\164\22\0\1\164\20\0\1\u01d9\51\0"+
    "\14\164\1\u01da\15\164\10\0\1\164\22\0\1\164\2\0"+
    "\32\164\10\0\1\164\16\0\1\u01db\3\0\1\164\63\0"+
    "\1\u01db\6\0\10\13\1\u01dc\21\13\1\u01dd\7\0\1\13"+
    "\22\0\1\13\2\0\16\164\1\u01de\13\164\10\0\1\164"+
    "\22\0\1\164\2\0\15\164\1\u01df\14\164\10\0\1\164"+
    "\22\0\1\164\17\0\1\u01e0\52\0\22\164\1\u01e1\7\164"+
    "\4\0\1\u01e2\3\0\1\164\22\0\1\164\47\0\1\u01e3"+
    "\2\0\1\u01e4\17\0\13\13\1\u01e5\16\13\10\0\1\13"+
    "\22\0\1\13\15\0\1\u01e6\54\0\22\164\1\u01e7\7\164"+
    "\4\0\1\u01e8\3\0\1\164\22\0\1\164\2\0\22\164"+
    "\1\u01e9\7\164\4\0\1\u01ea\3\0\1\164\22\0\1\164"+
    "\24\0\1\u01ea\13\0\1\u01ea\31\0\6\164\1\u015a\23\164"+
    "\10\0\1\164\22\0\1\164\10\0\1\u015b\60\0\46\u01e3"+
    "\1\u01eb\1\0\1\u01ec\17\u01e3\47\u01e4\1\0\1\u01ed\1\u01eb"+
    "\16\u01e4\1\0\4\13\1\132\25\13\10\0\1\13\22\0"+
    "\1\13\6\0\1\u01ee\63\0\23\164\1\u01ef\6\164\10\0"+
    "\1\164\22\0\1\164\25\0\1\u01f0\44\0\4\164\1\u01f1"+
    "\25\164\10\0\1\164\22\0\1\164\6\0\1\u01f2\145\0"+
    "\1\u01f3\4\0\46\u01e3\1\u01f4\1\0\1\u01ec\17\u01e3\47\u01e4"+
    "\1\0\1\u01ed\1\u01f5\16\u01e4\22\0\1\60\46\0\31\164"+
    "\1\u01f6\10\0\1\164\22\0\1\164\33\0\1\u01f7\36\0"+
    "\31\164\1\u01f8\10\0\1\164\22\0\1\164\33\0\1\u01f9"+
    "\35\0\46\u01e3\1\u01eb\1\0\1\u01ec\12\u01e3\1\u01fa\4\u01e3"+
    "\47\u01e4\1\0\1\u01ed\1\u01eb\11\u01e4\1\u01fb\4\u01e4\1\0"+
    "\3\164\1\u01fc\26\164\10\0\1\164\22\0\1\164\5\0"+
    "\1\u01fd\64\0\7\164\1\u01fe\22\164\10\0\1\164\22\0"+
    "\1\164\11\0\1\u01ff\60\0\1\u0200\31\164\10\0\1\164"+
    "\22\0\1\164\2\0\1\u0201\67\0\4\164\1\u0202\25\164"+
    "\10\0\1\164\22\0\1\164\6\0\1\u0203\63\0\23\164"+
    "\1\u0204\6\164\10\0\1\164\22\0\1\164\25\0\1\u0205"+
    "\44\0\1\u0206\31\164\10\0\1\164\22\0\1\164\2\0"+
    "\1\u0207\67\0\1\u015a\31\164\10\0\1\164\22\0\1\164"+
    "\2\0\1\u015b\67\0\3\164\1\u0191\26\164\10\0\1\164"+
    "\22\0\1\164\5\0\1\u0194\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\27\1\1\0\1\11\1\0\1\1\1\0\3\1"+
    "\5\0\5\1\1\0\4\1\1\11\2\1\1\0\5\1"+
    "\1\0\12\1\1\0\6\1\1\0\1\1\1\0\13\1"+
    "\1\0\3\1\1\0\1\1\5\0\1\11\1\1\1\11"+
    "\1\0\1\1\6\0\1\11\3\0\10\1\1\0\3\1"+
    "\1\0\10\1\1\0\2\1\1\0\5\1\1\0\4\1"+
    "\1\0\6\1\1\0\1\1\1\0\4\1\1\0\5\1"+
    "\1\0\4\1\1\0\1\1\1\0\10\1\5\0\1\1"+
    "\5\0\2\1\1\0\14\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\6\1\2\0\4\1\1\0\6\1\1\0\4\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\3\1\10\0\1\11\10\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\16\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\5\0\1\1\1\11\6\1\2\0\3\1\2\0"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\6\1\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\5\1\2\0"+
    "\5\1\1\0\1\1\1\0\3\1\3\0\6\1\3\0"+
    "\3\1\1\11\4\1\2\0\4\1\1\0\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\2\1\2\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\3\0\1\1\1\0\1\1\1\0\1\1\5\0"+
    "\1\1\1\0\1\1\1\0\1\11\2\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[519];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Se leyo una constante");
            }
          case 12: break;
          case 2: 
            { System.out.println("Se leyo un caracter");
            }
          case 13: break;
          case 3: 
            { System.out.println("Se leyo un Operador");
            }
          case 14: break;
          case 4: 
            { System.out.println("Se leyo un tipo de dato");
            }
          case 15: break;
          case 5: 
            { System.out.println("Se leyo un comentario");
            }
          case 16: break;
          case 6: 
            { System.out.println ("Se leyo una palabra reservada");
            }
          case 17: break;
          case 7: 
            { System.out.println("Se leyo una etiqueta de php");
            }
          case 18: break;
          case 8: 
            { System.out.println("Se leyo una variable");
            }
          case 19: break;
          case 9: 
            { System.out.println("Se leyo una variable predeterminada");
            }
          case 20: break;
          case 10: 
            { System.out.println ("Se leyo una constante en tiempo de compilacion");
            }
          case 21: break;
          case 11: 
            { System.out.println("Se leyo un acceso a base de datos");
            }
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
